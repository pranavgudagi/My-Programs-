#include<stdio.h>
#include<stdlib.h>
typedef struct node{
    int data;
    struct node *next;
}Node;

typedef struct stack{
    Node *top;
}Stack;

Node *createnode(int data){
    Node *newnode=(Node *)malloc(sizeof(Node));
    if(newnode == NULL)
    {
        printf("memmory allocattion error..");
        return NULL;
    }
    newnode->data=data;
    newnode->next=NULL;
    return newnode;
}

Stack *createstack(){
    Stack *stack=malloc(sizeof(Stack));
    stack->top=NULL;
    return stack;
}

void push(Stack *stack,int data){
    Node *newnode=createnode(data);
    if(!newnode) return;
    newnode->next=stack->top;
    stack->top=newnode;
    printf("%d is pushed to the stack ",data);
}

int pop(Stack *stack){
    if(stack->top!=NULL){
        printf("stack underflow...\n");
        return -1;  
    }
    Node *temp=stack->top;
    int popped=temp->data;
    stack->top=stack->top->next;
    free(temp);
    return popped;

}
int peek(Stack *stack){
    return stack->top->data;
}

int isEmpty(Stack *stack){
    return stack->top==NULL;
}
// Function to print all elements in the stack
void printStack(Stack* stack) {
    if (isEmpty(stack)) {
        printf("Stack is empty\n");
        return;
    }

    Node* current = stack->top;
    printf("Stack elements:\n");
    while (current != NULL) {
        printf("%d\n", current->data);
        current = current->next;
    }
    printf("all elements are printed..");
}

int main() {
    Stack* stack = createstack();

    push(stack, 10);
    push(stack, 20);
    push(stack, 30);
    push(stack,50);

    printf("%d popped from stack\n", pop(stack));
    printf("Top element is %d\n", peek(stack));

    if (isEmpty(stack)) {
        printf("Stack is empty\n");
    } else {
        printf("Stack is not empty\n");
    }
    printStack(stack);

    return 0;
}
